// se puede trabajar sass desde una ui como prepros
// desde el navegador con sassmeister o codepen
// instalarlo desde la linea de comandos
// ruby sass
// node sass -> libsass
//despues de instalar ruby o node, para compilar un archivo scss, desde la terminal
//nos posicionamos en la carpeta donde vamos a trabajar
//sass styles.scss para mostrar el codigo
//para compilar al archivo de salida
//sass styles.scss styles.css
//colocarle un watch que rastree los cambios
//sass --watch .(todo el directorio)
//sass --watch entrada.scss:salida.css
//sass --watch entradafolder:salidafolder
//flag para determinar la forma de salida
//-style(nested|compact|expanded|compressed) -l(ele)
//sass --watch scss:css --style compressed
//
//con node
//se instala node
//npm install -g node-sass
//node-sass scss/styles.scss para ver el codigo
//node-sass --watch styles.scss styles.css(de un archivo a otro)
//node-sass --watch entrada --output salida(de un folder a otro)
//para indicar el directorio en el que se compilara --output
//estilo de salida --output-style(nested|...)

//Sintaxis
//variables
//se usa el signo $
//$var: 5;
//se invoca -> p {order: $varieble;}
//se pueden hacer operaciones
//las multiplicaciones que implican px, emÂ´s.... se ejecutan con normalidad, toma el numero y hace la operacion y la unidad se mantiene
//variables con multiples valores
//$list: 1px solid red;
//alcance de las variables-scope
//las variables definidas dentro de un bloque de codigo existiran solo dentro de ese bloque (variables locales)
//una variable global y una local pueden tener el mismo nombre, ambas existen en scopes distintos
//flag !default
//!default indica al compilador, si hay una variable declarada con el mismo nombre, no la sobreescribas, si no existe, creala
//!global indica sobreescribir el valor de una variable global con el mismo nombre

//Anidamiento
/*
nav {
  display: flex;
  ul {
    color: transparent;
    li {
      color: aquamarine;
      a {
        text-decoration: none;
      }
    }
  }
}
buena practica, evitar el anidamiento excesivo
h2 {
    + p {
        color: red;
    }
    > a {
        text-transform: uppercase;
    }
}
selectores hermanos son utiles

cuando usar &
.button {
    display: inline-block;
    backgroun: red;
    :hover {
        font-size: 32px;
    }
}
esto daria error, pues se genera un espacio como si el estado hover
fuera hijo de .button

forma correcta
.button {
    display: inline-block;
    backgroun: red;
    &:hover {
        font-size: 32px;
    }
}

tambien se puede usar
.widget {
    margin: 0;
    footer & {
        margin: 5px;
    }
}

para afectar al padre y aun elemento dentro
.menu {
    &, ul{
        list-style: none;
    }
}

para afectar al padre y a todos los a con la clase .button
mediante una interpolacion de variables
.button {
    color: green;
    a#{&}{
        color: red;
    }
}

en una anidacion el & tomara al padre o a los selectores padres
segun el nivel de anidacion

para afectar un elemento que que no es hijo directo pero tiene relacion con otro declarado
.menu {
    variable local
    $menu-bg: blue;

    @at-root .icon-menu{
        color: $menu-bg;
    }
}
al compilarse, la clase icon-menu estara fuera de la clase .menu, pero por @at-root tendra acceso a la variable local aunque no sea hijo directo
*/

/*Imports
@import "otro.scss";
se importa sin la extension

partials
archivos que no van a ser compilados
su nombre debe comenzar con guion bajo _file.scss
*/

/*Extend
Permite extender los estilos de una clase

.menu {
    propiedad: valor;
    propiedad: valor;
    propiedad: valor;
    propiedad: valor;
}

extrae las propiedades de la clase menu
.menu-2 {
    @extend .menu;
    flex-direction: column;
}
//comentario invisible, no se compila
/**comentario visible, se compila
*/

/*
Directivas de sass(at rules)
@font-face
@import
@media
@key-frames
@support
@page

Sass directives
function
@function
@return

Control
@if/else
@each
@for
@while

Mixins
@mixin
@include
@content

Debug
@warn
@error
@debug

Otros
@extend
@at-root
*/
